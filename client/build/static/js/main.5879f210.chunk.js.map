{"version":3,"sources":["spotify-functions.js","connect-spotify.js","spotify-container.js","RecommendationsButton.js","navbar.js","App.js","serviceWorker.js","index.js"],"names":["redirectUrlToSpotifyForLogin","CLIENT_ID","process","REACT_APP_SPOTIFY_CLIENT_ID","REDIRECT_URI","REACT_APP_SPOTIFY_PRODUCTION_REDIRECT_URI","encodeURIComponent","join","getHashParams","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","ConnectSpotify","console","log","SpotifyFunctions","react_default","a","createElement","className","href","type","Component","SpotifyContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loggedInToSpotify","accessToken","access_token","setState","concat","connect_spotify","RecommendationsButton","handleRecommendations","asyncToGenerator","regenerator_default","mark","_callee","token","_ref2","wrap","_context","prev","next","axios","get","sent","data","t0","error","stop","bind","assertThisInitialized","onClick","Navbar","spotify_container","RecommendationsButton_RecommendationsButton","App","response","post","responseToPost","callApi","body","fetch","json","status","Error","message","abrupt","handleSubmit","_callee2","_context2","preventDefault","method","headers","Content-Type","JSON","stringify","text","_this2","then","res","express","catch","err","_this3","navbar","onSubmit","value","onChange","target","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","require","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5879f210.chunk.js","sourcesContent":["export function redirectUrlToSpotifyForLogin() {\n\tconst CLIENT_ID = process.env.REACT_APP_SPOTIFY_CLIENT_ID;\n\tconst REDIRECT_URI =\n\t\tprocess.env.NODE_ENV === 'production'\n\t\t\t? process.env.REACT_APP_SPOTIFY_PRODUCTION_REDIRECT_URI\n\t\t\t: process.env.REACT_APP_SPOTIFY_DEVELOPMENT_REDIRECT_URI;\n\tconst scopes = ['user-read-private', 'user-modify-playback-state'];\n\treturn (\n\t\t'https://accounts.spotify.com/authorize?client_id=' +\n\t\tCLIENT_ID +\n\t\t'&redirect_uri=' +\n\t\tencodeURIComponent(REDIRECT_URI) +\n\t\t'&scope=' +\n\t\tencodeURIComponent(scopes.join(' ')) +\n\t\t'&response_type=token'\n\t);\n}\n\nexport function checkUrlForSpotifyAccessToken() {\n\tconst params = getHashParams();\n\tconst accessToken = params.access_token;\n\tif (!accessToken) {\n\t\treturn false;\n\t} else {\n\t\treturn accessToken;\n\t}\n}\n\nexport function getHashParams() {\n\t//helper function to parse the query string that Spotify sends back when you log in\n\tvar hashParams = {};\n\tvar e,\n\t\tr = /([^&;=]+)=?([^&;]*)/g,\n\t\tq = window.location.hash.substring(1);\n\t// eslint-disable-next-line\n\twhile ((e = r.exec(q))) {\n\t\thashParams[e[1]] = decodeURIComponent(e[2]);\n\t}\n\treturn hashParams;\n}\n","import React, { Component } from 'react';\nimport * as SpotifyFunctions from './spotify-functions.js';\n\nclass ConnectSpotify extends Component {\n\trender() {\n\t\tconsole.log(\n\t\t\t'in connectSpotify' + SpotifyFunctions.redirectUrlToSpotifyForLogin()\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"ConnectSpotify\">\n\t\t\t\t<a href={SpotifyFunctions.redirectUrlToSpotifyForLogin()}>\n\t\t\t\t\t<button type=\"button\">Connect to Spotify</button>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ConnectSpotify;\n","import React, {Component} from 'react'\nimport ConnectSpotify from './connect-spotify'\nimport * as SpotifyFunctions from './spotify-functions.js'\n\nclass SpotifyContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loggedInToSpotify: false,\n      accessToken: null\n    }\n  }\n\n  componentDidMount() {\n    //will check URL for accessToken hash. If it's not there, it will show the connect-spotify-button as a link\n    //which will then redirect back to your site with the hash. If there is a hash, then we will jump right into the player\n    const accessToken = SpotifyFunctions.checkUrlForSpotifyAccessToken()\n    accessToken\n      ? this.setState({loggedInToSpotify: true, accessToken: accessToken})\n      : this.setState({loggedInToSpotify: false, accessToken: null})\n  }\n\n  render() {\n    return (\n      <div className=\"SpotifyContainer\">\n        {!this.state.loggedInToSpotify ? (\n          <ConnectSpotify />\n        ) : (\n          <p>{`Access Token: ${this.state.accessToken}`}</p>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default SpotifyContainer\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { getHashParams } from './spotify-functions';\n\n// eslint-disable-next-line\nconst functionConversion = 'seed_genres=blues&max_valence=0.5';\n// function converting from google to spotify will have to convert to string before output: key=value.join('&')\n// will be importing output of function here (likewise ../../server/api/spotify)\n\nexport default class RecommendationsButton extends Component {\n  constructor() {\n    super();\n    this.handleRecommendations = this.handleRecommendations.bind(this);\n  }\n  handleRecommendations = async () => {\n    try {\n      const token = getHashParams();\n      //currently hard-coding query string. this will have to be dynamically built in the front-end\n      console.log(\n        `localhost:8080/api/spotify/find?token=${\n          token.access_token\n        }&recommendations?seed_genres=blues&max_valence=0.5`\n      );\n      // eslint-disable-next-line\n      const { data } = await axios.get(\n        `/api/spotify/find?token=${token.access_token}`\n      ); // using relative path because of prpoxy setup for create-react-app\n\n      // console.log returns the url to the Spotify Play link to be used in future\n      // console.log(data.tracks[0].external_urls.spotify)\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  render() {\n    return (\n      <button type=\"button\" onClick={this.handleRecommendations}>\n        Get Recomendations\n      </button>\n    );\n  }\n}\n","import React from 'react';\nimport SpotifyContainer from './spotify-container';\nimport RecommendationsButton from './RecommendationsButton';\n\nconst Navbar = () => (\n  <div>\n    <nav>\n      <h1>MOODIFY</h1>\n      <SpotifyContainer />\n      <RecommendationsButton />\n    </nav>\n    <hr />\n  </div>\n);\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport Navbar from './navbar';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n\n  // TODO: remove sample code\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    return body;\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n    this.setState({ responseToPost: body });\n  };\n\n  // END TODO\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Navbar />\n        </header>\n        {/* TODO: Remove sample code */}\n        <p>{this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n        {/* END TODO */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}